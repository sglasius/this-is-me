{"ast":null,"code":"import { Breakpoints } from '@angular/cdk/layout';\nimport { map, shareReplay } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/cdk/layout\";\nimport * as i2 from \"@angular/material/sidenav\";\nimport * as i3 from \"@angular/material/toolbar\";\nimport * as i4 from \"@angular/material/list\";\nimport * as i5 from \"@angular/material/button\";\nimport * as i6 from \"@angular/material/icon\";\nimport * as i7 from \"@angular/common\";\nconst _c0 = [\"*\"];\nexport class MainNavComponent {\n  constructor(breakpointObserver) {\n    this.breakpointObserver = breakpointObserver;\n    this.isHandset$ = this.breakpointObserver.observe(Breakpoints.Handset).pipe(map(result => result.matches), shareReplay());\n  }\n\n}\n\nMainNavComponent.ɵfac = function MainNavComponent_Factory(t) {\n  return new (t || MainNavComponent)(i0.ɵɵdirectiveInject(i1.BreakpointObserver));\n};\n\nMainNavComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: MainNavComponent,\n  selectors: [[\"app-main-nav\"]],\n  ngContentSelectors: _c0,\n  decls: 22,\n  vars: 6,\n  consts: [[1, \"sidenav-container\"], [\"fixedInViewport\", \"true\", 1, \"sidenav\", 3, \"mode\"], [\"drawer\", \"\"], [\"mat-list-item\", \"\", \"href\", \"#\"], [\"color\", \"primary\"], [\"type\", \"button\", \"aria-label\", \"Toggle sidenav\", \"mat-icon-button\", \"\", 3, \"click\"], [\"aria-label\", \"Side nav toggle icon\"]],\n  template: function MainNavComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      const _r1 = i0.ɵɵgetCurrentView();\n\n      i0.ɵɵprojectionDef();\n      i0.ɵɵelementStart(0, \"mat-sidenav-container\", 0);\n      i0.ɵɵelementStart(1, \"mat-sidenav\", 1, 2);\n      i0.ɵɵpipe(3, \"async\");\n      i0.ɵɵpipe(4, \"async\");\n      i0.ɵɵelementStart(5, \"mat-toolbar\");\n      i0.ɵɵtext(6, \"Navigation\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"mat-nav-list\");\n      i0.ɵɵelementStart(8, \"a\", 3);\n      i0.ɵɵtext(9, \"Link 1\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"a\", 3);\n      i0.ɵɵtext(11, \"Link 2\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"a\", 3);\n      i0.ɵɵtext(13, \"Link 3\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"mat-sidenav-content\");\n      i0.ɵɵelementStart(15, \"mat-toolbar\", 4);\n      i0.ɵɵelementStart(16, \"button\", 5);\n      i0.ɵɵlistener(\"click\", function MainNavComponent_Template_button_click_16_listener() {\n        i0.ɵɵrestoreView(_r1);\n\n        const _r0 = i0.ɵɵreference(2);\n\n        return _r0.toggle();\n      });\n      i0.ɵɵelementStart(17, \"mat-icon\", 6);\n      i0.ɵɵtext(18, \"menu\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(19, \"span\");\n      i0.ɵɵtext(20, \"PLAY\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵprojection(21);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"mode\", i0.ɵɵpipeBind1(4, 4, ctx.isHandset$) ? \"over\" : \"side\");\n      i0.ɵɵattribute(\"role\", i0.ɵɵpipeBind1(3, 2, ctx.isHandset$) ? \"dialog\" : \"navigation\");\n    }\n  },\n  directives: [i2.MatSidenavContainer, i2.MatSidenav, i3.MatToolbar, i4.MatNavList, i4.MatListItem, i2.MatSidenavContent, i5.MatButton, i6.MatIcon],\n  pipes: [i7.AsyncPipe],\n  styles: [\".sidenav-container[_ngcontent-%COMP%] {\\n  height: 100%;\\n  background-color: transparent;\\n}\\n\\n.sidenav[_ngcontent-%COMP%] {\\n  width: 200px;\\n  background: rgba(241, 241, 241, 0.5);\\n}\\n\\n.sidenav[_ngcontent-%COMP%]   .mat-toolbar[_ngcontent-%COMP%] {\\n  background: inherit;\\n}\\n\\n@media (min-width: 10000px) {\\n  .sidenav[_ngcontent-%COMP%] {\\n    display: none;\\n  }\\n}\\n\\n.mat-toolbar.mat-primary[_ngcontent-%COMP%] {\\n  position: sticky;\\n  top: 0;\\n  z-index: 1;\\n  background: rgba(0, 0, 0, 0.5);\\n  color: #f1f1f1;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4tbmF2LmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsWUFBQTtFQUNBLDZCQUFBO0FBQ0Y7O0FBRUE7RUFDRSxZQUFBO0VBQ0Esb0NBQUE7QUFDRjs7QUFFQTtFQUNFLG1CQUFBO0FBQ0Y7O0FBRUE7RUFDRTtJQUNBLGFBQUE7RUFDQTtBQUNGOztBQUNBO0VBQ0UsZ0JBQUE7RUFDQSxNQUFBO0VBQ0EsVUFBQTtFQUVBLDhCQUFBO0VBQ0EsY0FBQTtBQUFGIiwiZmlsZSI6Im1haW4tbmF2LmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLnNpZGVuYXYtY29udGFpbmVyIHtcbiAgaGVpZ2h0OiAxMDAlOyBcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG59XG5cbi5zaWRlbmF2IHtcbiAgd2lkdGg6IDIwMHB4O1xuICBiYWNrZ3JvdW5kOiByZ2JhKDI0MSwgMjQxLCAyNDEsIDAuNSk7XG59XG5cbi5zaWRlbmF2IC5tYXQtdG9vbGJhciB7XG4gIGJhY2tncm91bmQ6IGluaGVyaXQ7XG59XG5cbkBtZWRpYSAobWluLXdpZHRoOiAxMDAwMHB4KSB7XG4gIC5zaWRlbmF2IHtcbiAgZGlzcGxheTogbm9uZTsgIH1cbn1cblxuLm1hdC10b29sYmFyLm1hdC1wcmltYXJ5IHtcbiAgcG9zaXRpb246IHN0aWNreTtcbiAgdG9wOiAwO1xuICB6LWluZGV4OiAxO1xuICAvLyBiYWNrZ3JvdW5kOiByZ2JhKDI0MSwgMjQxLCAyNDEsIDAuNSk7XG4gIGJhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMC41KTtcbiAgY29sb3I6ICNmMWYxZjE7XG4gIFxufVxuIl19 */\"]\n});","map":{"version":3,"sources":["/Users/steven/git/BBW-test/src/app/shared/main-nav/main-nav.component.ts","/Users/steven/git/BBW-test/src/app/shared/main-nav/main-nav.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component } from '@angular/core';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-main-nav',\n  templateUrl: './main-nav.component.html',\n  styleUrls: ['./main-nav.component.scss']\n})\nexport class MainNavComponent {\n\n  isHandset$: Observable<boolean> = this.breakpointObserver.observe(Breakpoints.Handset)\n    .pipe(\n      map(result => result.matches),\n      shareReplay()\n    );\n\n  constructor(private breakpointObserver: BreakpointObserver) {}\n\n}\n","<mat-sidenav-container class=\"sidenav-container\">\n  <mat-sidenav #drawer class=\"sidenav\" fixedInViewport=\"true\"\n      [attr.role]=\"(isHandset$ | async) ? 'dialog' : 'navigation'\"\n      [mode]=\"(isHandset$ | async) ? 'over' : 'side'\">\n    <mat-toolbar>Navigation</mat-toolbar>\n    <mat-nav-list>\n      <a mat-list-item href=\"#\">Link 1</a>\n      <a mat-list-item href=\"#\">Link 2</a>\n      <a mat-list-item href=\"#\">Link 3</a>\n    </mat-nav-list>\n  </mat-sidenav>\n  <mat-sidenav-content>\n    <mat-toolbar color=\"primary\">\n      <button\n        type=\"button\"\n        aria-label=\"Toggle sidenav\"\n        mat-icon-button\n        (click)=\"drawer.toggle()\">\n        <mat-icon aria-label=\"Side nav toggle icon\">menu</mat-icon>\n      </button>\n      <span>PLAY</span>\n    </mat-toolbar>\n    <ng-content></ng-content>\n    <!-- Add Content Here -->\n  </mat-sidenav-content>\n</mat-sidenav-container>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}